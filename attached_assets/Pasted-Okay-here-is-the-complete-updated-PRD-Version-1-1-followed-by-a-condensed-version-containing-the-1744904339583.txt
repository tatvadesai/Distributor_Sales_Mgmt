Okay, here is the complete, updated PRD (Version 1.1) followed by a condensed version containing the key technical specifications relevant for a developer starting the build, potentially on a platform like Replit.

-----

## Complete Product Requirements Document (PRD) - Version 1.1

**Product Requirements Document (PRD): Distributor Performance Tracking System**
**Version:** 1.1
**Date:** 17-Apr-2025

-----

### **1. Overview**

#### **Objective**

Build a lightweight, error-resistant system to track distributor targets (weekly/monthly/quarterly/yearly), log actual sales, auto-calculate achievements/shortfalls, and share reports via email/WhatsApp. Designed to run locally on low-spec systems.

#### **Key Requirements**

1.  **Error Minimization**: Dynamic dropdowns for data input (distributors, periods) to prevent typos and ensure consistency.
2.  **Local First**: Works offline on low-spec systems (Target: i5, 4GB RAM).
3.  **Automation**: Auto-calculate achievements/shortfalls and generate reports.
4.  **Shareability**: Send reports via email/WhatsApp with one click.

-----

### **2. System Architecture**

#### **Tech Stack**

  - **Frontend**: Simple HTML/CSS/JS (no heavy frameworks).
  - **Backend**: Flask (Python) for lightweight REST API.
  - **Database**: SQLite (no setup needed, single file-based).
  - **Reporting**: `ReportLab` (for PDF), `Pandas` & `openpyxl` (for Excel).
  - **Notifications**: `smtplib` (Python standard library for Email), Twilio API (for WhatsApp - optional).

#### **Why This Stack?**

  - Minimal RAM/CPU usage.
  - No external database setup or cloud dependencies required for core function.
  - Python-based, easy to understand, modify, and audit.
  - Leverages standard or lightweight libraries.

-----

### **3. Features & Functionality**

#### **3.1 User Roles**

  - **Admin (You)**: Full access (CRUD operations on distributors, targets, actuals; view dashboard; send reports). Requires simple password authentication.
  - **Distributors**: Receive reports (read-only access via email/WhatsApp).

#### **3.2 Core Features**

| **Feature** | **Description** |
| :------------------------ | :------------------------------------------------------------------------------------------- |
| **Add/Edit Distributors** | Manage distributor details (Name, email, WhatsApp). Use dropdowns for editing existing. Unique name check. |
| **Set Targets** | Define Weekly, monthly, quarterly, yearly targets. Use dropdowns for Distributor, Period Type, Period Identifier. *(Note: M/Y targets set/edited infrequently)* |
| **Log Actual Sales** | Log Weekly sales via dropdowns (Distributor, Week Range). Auto-calculate derived M/Q/Y periods. *(Note: Most frequent data entry task)* |
| **Performance Dashboard** | *(See Section 3.3)* Visual summary of targets vs. actuals, achievements, shortfalls.      |
| **Export Reports** | Generate PDF/Excel reports summarizing performance metrics.                                  |
| **Send Notifications** | One-click Email/WhatsApp report distribution to selected distributors.                         |

#### **3.3 Dashboard Details**

  * **Objective:** Offer an at-a-glance summary of overall and individual distributor progress against targets.
  * **Components:**
    1.  **Period Selector:** Dropdowns for `Period Type` (W/M/Q/Y) and specific `Period Identifier`. Defaults to current period.
    2.  **Overall Summary:** Displays Total Target, Total Actual, Overall Achievement ($, %) for the selected period across all distributors.
    3.  **Distributor Performance Table:** Lists Distributor Name, Target, Actual, Achievement ($, %), Shortfall ($) for the selected period. Sortable columns.
    4.  **Filtering (Optional):** Dropdown to filter the table by a specific distributor.
  * **Technology:** Rendered using standard HTML tables styled with CSS. Server-side calculations (Flask/Python).

*UI Mock Placeholder:*

-----

### **4. Data Model**

#### **4.1 Tables (SQLite)**

1.  **Distributor**

      * `id` (INTEGER, Primary Key, Autoincrement)
      * `name` (TEXT, Unique, Not Null)
      * `email` (TEXT)
      * `whatsapp` (TEXT) *(Store as text for potential leading zeros or country codes)*

2.  **Target**

      * `id` (INTEGER, Primary Key, Autoincrement)
      * `distributor_id` (INTEGER, Not Null, Foreign Key referencing Distributor.id)
      * `period_type` (TEXT, Not Null - 'Weekly', 'Monthly', 'Quarterly', 'Yearly')
      * `period_identifier` (TEXT, Not Null - e.g., "Wk 16-2025", "Apr-2025", "Q2-2025", "2025")
      * `target_value` (REAL or INTEGER, Not Null)
      * *Constraint: Unique (distributor\_id, period\_type, period\_identifier)*

3.  **Actual**

      * `id` (INTEGER, Primary Key, Autoincrement)
      * `distributor_id` (INTEGER, Not Null, Foreign Key referencing Distributor.id)
      * `week_start_date` (TEXT, Not Null - Store as 'YYYY-MM-DD' for easy sorting/calculation)
      * `actual_sales` (REAL or INTEGER, Not Null)
      * `month` (TEXT, Auto-calculated: e.g., "Apr-2025")
      * `quarter` (TEXT, Auto-calculated: e.g., "Q2-2025")
      * `year` (TEXT, Auto-calculated: e.g., "2025")
      * *Constraint: Unique (distributor\_id, week\_start\_date)*

*(Initial Distributor Data: Ammar Agency, Firods Coldrinks, Shivam Enterprise, Burhan Enterprise, Patel Colddrinks, Maa Ashapura Marketing, Prit Enterprise Retail - To be added via the UI)*

-----

### **5. Data Input Workflow**

#### **5.1 Add Distributor**

  - **Fields**: Name (text), Email (email format), WhatsApp (numeric/text).
  - **Validation**: Name must be unique (case-insensitive check recommended). Email format check.

#### **5.2 Set Targets**

  - **Inputs**:
      * Distributor (Dropdown populated from `Distributor` table).
      * Period Type (Dropdown: Weekly, Monthly, Quarterly, Yearly).
      * Period Identifier (Input mechanism depends on Period Type - e.g., calendar for week/month start, simple text/dropdown for Quarter/Year).
      * Target Value (Numeric).
  - **Validation**: Ensure target value is numeric. Prevent duplicate target entries for the same distributor/period.

#### **5.3 Log Actual Sales**

  - **Inputs**:
      * Distributor (Dropdown populated from `Distributor` table).
      * Week Start Date (Calendar widget recommended, selecting the Monday of the week).
      * Actual Sales (Numeric).
  - **Auto-Calculation**: On save, backend calculates and stores `month`, `quarter`, `year` based on `week_start_date`.
  - **Validation**: Ensure sales value is numeric. Prevent duplicate entries for the same distributor/week.

-----

### **6. Error Prevention & Best Practices**

#### **6.1 Input Validation**

  - **Dropdowns Primarily**: Use dynamically populated dropdowns for selecting existing Distributors and defined Periods where possible.
  - **Server-Side Validation**: Backend enforces all constraints (uniqueness, data types, formats).
  - **Frontend Hints**: Basic HTML5 validation (e.g., `type="email"`, `required`, `type="number"`) for better UX.
  - **Uniqueness Checks**: Implemented in backend logic before saving data (Distributor names, Targets per period, Actuals per week).

#### **6.2 Audit Logging (Optional - Lower Priority)**

  - A simple log file or table tracking key changes (who/when/what).

#### **6.3 Data Backup**

  - Simple script (e.g., Python or Shell) to copy/zip the SQLite DB file daily to a backup location.

#### **6.4 Role-Based Access**

  - Implement basic password protection for all data modification actions (CRUD operations) and viewing the main application. Flask-Login or a simpler session-based check.

-----

### **7. Reporting & Notifications**

#### **7.1 Report Generation**

  - **PDF**: Use `ReportLab`. Generate a summary table similar to the dashboard for a selected distributor/period.
  - **Excel**: Use `Pandas` DataFrame to create an `.xlsx` file with detailed target vs. actual data. Export using `df.to_excel()`.

#### **7.2 Notification Workflow**

1.  Admin selects a distributor (or 'All') and a period on the dashboard or a dedicated reporting page.
2.  Admin clicks "Generate & Send Report".
3.  System generates PDF report.
4.  **Email**: Uses Python's `smtplib` to connect to an SMTP server (e.g., Gmail with App Password, SendGrid, or local server) and send the PDF as an attachment to the distributor's email from the `Distributor` table.
5.  **WhatsApp (Optional)**: Uses Twilio's WhatsApp API. Sends a message potentially with a link to the report or a summary text. Requires Twilio account setup and API credentials.

-----

### **8. Implementation Plan**

#### **Phase 1: MVP - Core Functionality & Dashboard (Target: 1 Week)**

  * **Objective:** Establish the foundation and deliver core value quickly.
  * **Steps (Starting Now):**
    1.  **(Day 1-2): Project Setup & Distributor Management:** Flask setup, SQLite DB (`Distributor` table), CRUD forms/views for Distributors.
    2.  **(Day 3-4): Target & Actuals Management:** Implement `Target` and `Actual` models/tables, CRUD forms/views (with dropdowns and auto-calculation logic for Actuals).
    3.  **(Day 5-7): Basic Dashboard Implementation:** Backend logic for data aggregation, frontend dashboard view (HTML/CSS table display, period selectors). Basic Admin authentication.

#### **Phase 2: Reporting & Notifications (Target: 3 Days)**

  * **Objective:** Enable sharing of performance data.
  * **Steps:** PDF (`ReportLab`), Excel (`Pandas`) generation logic. Email (`smtplib`) integration.

#### **Phase 3: Enhancements & Polish (Target: 2 Days)**

  * **Objective:** Improve robustness and add optional features.
  * **Steps:** Optional WhatsApp (Twilio) integration. Refine validation/error handling. Implement backup script.

-----

### **9. Testing Scenarios (Examples)**

| **Scenario** | **Expected Outcome** |
| :---------------------------------- | :-------------------------------------------------------------------------------- |
| Add distributor duplicate name      | Error message: "Distributor name already exists." No data saved.                |
| Log sales for existing week/distro  | Error message: "Sales already logged for this distributor/week." No data saved. |
| Set target for existing period/distro | Error message: "Target already set for this distributor/period." No data saved.     |
| Select 'Apr-2025' on Dashboard      | Table shows aggregated data for all distributors for weeks falling in April 2025.   |
| Send Email Report                   | PDF generated and successfully emailed to the selected distributor's address.      |
| Access admin page without login     | Redirected to login page or denied access.                                        |

-----

### **10. Deployment**

  - **Local Machine Execution:**
    ```bash
    git clone <your-repo-url>
    cd <repo-directory>
    python -m venv venv
    source venv/bin/activate  # On Windows: venv\Scripts\activate
    pip install -r requirements.txt
    flask db init # If using Flask-Migrate for schema changes
    flask db migrate
    flask db upgrade
    flask run
    ```
  - **Dependencies:** List all Python libraries in `requirements.txt`.
  - **Database:** The `sqlite.db` file will be created in the instance folder or project root.
  - **Backup Strategy**: Daily automated copy/zip of the `sqlite.db` file to a separate folder/drive.

-----

### **11. Future Enhancements**

1.  **Cloud Sync/Backup**: Integrate with cloud storage or DB like Supabase/PostgreSQL for robustness.
2.  **Advanced Analytics/Charts**: Add simple charts (e.g., using Chart.js) if performance allows.
3.  **Improved UI**: Potential migration to a lightweight frontend framework if hardware upgrades occur.

-----

### **12. Appendix**

#### **Sample Code Snippets**

**Dropdowns in HTML (Flask/Jinja2)**

```html
<label for="distributor_id">Distributor:</label>
<select name="distributor_id" id="distributor_id" required>
  {% for distributor in distributors %}
    <option value="{{ distributor.id }}">{{ distributor.name }}</option>
  {% endfor %}
</select>
```

**Auto-Calculate Month/Quarter/Year (Python in Flask route or Model)**

```python
from datetime import datetime

def calculate_periods(week_start_date_str):
    # Assuming week_start_date_str is 'YYYY-MM-DD'
    week_start_dt = datetime.strptime(week_start_date_str, "%Y-%m-%d")
    month_str = week_start_dt.strftime("%b-%Y") # e.g., Apr-2025
    year_str = str(week_start_dt.year) # e.g., 2025
    quarter_num = ((week_start_dt.month - 1) // 3) + 1
    quarter_str = f"Q{quarter_num}-{year_str}" # e.g., Q2-2025
    return month_str, quarter_str, year_str

# When saving Actuals:
# ... get form data ...
# week_start = form.week_start_date.data # Assume it's YYYY-MM-DD
# month, quarter, year = calculate_periods(week_start)
# new_actual = Actual(..., week_start_date=week_start, month=month, quarter=quarter, year=year)
# db.session.add(new_actual)
# db.session.commit()
```

**Basic Flask App Structure**

```
/your_project
|-- /app
|   |-- __init__.py         # App factory
|   |-- routes.py           # Application routes (views)
|   |-- models.py           # Database models (Distributor, Target, Actual)
|   |-- forms.py            # Flask-WTF forms (optional but recommended)
|   |-- /templates          # HTML templates (Jinja2)
|   |   |-- base.html
|   |   |-- dashboard.html
|   |   |-- add_distributor.html
|   |   |-- ...
|   |-- /static             # CSS, JS, Images
|   |   |-- style.css
|-- migrations/             # Flask-Migrate files
|-- venv/                   # Virtual environment
|-- instance/
|   |-- app.db              # SQLite database file
|-- config.py               # Configuration settings
|-- requirements.txt        # Python dependencies
|-- run.py                  # Script to run the app (imports app from app)
|-- backup_script.py        # Optional backup script
```

-----

-----

## Key Specifications for Replit Implementation

This section extracts the core technical requirements for building the Distributor Performance Tracking System on Replit.

**1. Objective:** Build a local-first Flask web app to track distributor targets vs. actual sales using SQLite, with reporting via PDF/Excel and notifications. Prioritize error minimization via dropdowns.

**2. Tech Stack:**
\* **Language:** Python 3.x
\* **Web Framework:** Flask
\* **Database:** SQLite (standard library `sqlite3` or via Flask-SQLAlchemy)
\* **Frontend:** HTML, CSS, JavaScript (plain, no heavy frameworks)
\* **Templating:** Jinja2 (comes with Flask)
\* **Reporting Libraries:** `ReportLab` (PDF), `Pandas` & `openpyxl` (Excel)
\* **Notifications:** `smtplib` (Email), `twilio` (WhatsApp - optional)
\* **Forms (Recommended):** Flask-WTF for easier form handling and validation.
\* **Migrations (Recommended):** Flask-Migrate for managing DB schema changes.
\* **Authentication (Optional but Recommended):** Flask-Login for basic admin password protection.

**3. Core Features to Implement (MVP Focus - Phase 1):**
\* **Distributor Management:** CRUD operations for Distributors (Name, Email, WhatsApp). Ensure unique names.
\* **Target Management:** CRUD operations for Targets (Distributor ID, Period Type [W/M/Q/Y], Period Identifier, Value). Prevent duplicates per distributor/period.
\* **Actual Sales Logging:** Form to log weekly sales (Distributor ID, Week Start Date, Value). Auto-calculate and store Month, Quarter, Year based on week start date. Prevent duplicates per distributor/week.
\* **Dashboard:**
\* Period selection (Type + Identifier dropdowns).
\* Overall summary display (Total Target, Actual, Achievement $, %).
\* Table listing distributors with Target, Actual, Achievement ($, %), Shortfall ($) for the selected period.
\* Backend logic for data aggregation based on selected period.
\* **Basic Admin Authentication:** Password protect data modification routes.

**4. Data Model (SQLite Tables):**
\* **Distributor:** `id` (PK), `name` (UNIQUE NOT NULL), `email`, `whatsapp`
\* **Target:** `id` (PK), `distributor_id` (FK), `period_type` (NOT NULL), `period_identifier` (NOT NULL), `target_value` (NOT NULL), UNIQUE(`distributor_id`, `period_type`, `period_identifier`)
\* **Actual:** `id` (PK), `distributor_id` (FK), `week_start_date` (TEXT 'YYYY-MM-DD' NOT NULL), `actual_sales` (NOT NULL), `month` (TEXT), `quarter` (TEXT), `year` (TEXT), UNIQUE(`distributor_id`, `week_start_date`)

**5. Key Implementation Details:**
\* **Dropdowns:** Dynamically populate HTML `<select>` elements for Distributors, Period Types, etc., using data queried from the database via Flask routes/Jinja2 templates.
\* **Date Handling:** Use Python's `datetime` module for parsing dates and calculating derived periods (Month, Quarter, Year). Store dates consistently (e.g., 'YYYY-MM-DD').
\* **Validation:** Implement server-side validation in Flask routes for uniqueness, data types, and formats before committing to the database. Use Flask-WTF for form validation.
\* **Auto-calculation Logic:** See Python snippet in Appendix (Section 12) for calculating M/Q/Y from week start date.
\* **Reporting (Phase 2):** Implement functions using `ReportLab` for PDF and `Pandas` for Excel generation based on queried data.
\* **Email (Phase 2):** Use `smtplib` to send generated reports. Configure SMTP settings (consider using environment variables for credentials on Replit).

**6. Basic Setup/Run (Replit):**
\* Use Replit's Python template.
\* Add dependencies (`Flask`, `Flask-SQLAlchemy`, `Flask-Migrate`, `Flask-WTF`, `pandas`, `openpyxl`, `reportlab`, `twilio`) to `requirements.txt` or use Replit's package manager.
\* Set up `flask run` command or configure the Replit `Run` button (`run.py` script recommended).
\* Manage secrets (like email passwords, Twilio SID/Token) using Replit's Secrets manager.

**7. Code Snippets & Structure:** Refer to PRD Section 12 for sample HTML/Jinja2 dropdown code, Python date calculation logic, and a suggested Flask project structure.

This condensed brief should provide the core technical information needed to start development on Replit.